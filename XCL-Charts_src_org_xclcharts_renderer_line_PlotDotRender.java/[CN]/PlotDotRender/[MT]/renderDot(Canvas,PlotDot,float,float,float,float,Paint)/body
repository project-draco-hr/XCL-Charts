{
  float radius=pDot.getDotRadius();
  mRect.left=0.0f;
  mRect.top=0.0f;
  mRect.right=0.0f;
  mRect.bottom=0.0f;
  if (Float.compare(radius,0.0f) == 0 || Float.compare(radius,0.0f) == -1) {
    return mRect;
  }
  float cX=0.0f;
  if (XEnum.DotStyle.DOT == pDot.getDotStyle() || XEnum.DotStyle.RING == pDot.getDotStyle() || XEnum.DotStyle.X == pDot.getDotStyle()) {
    cX=left + Math.abs(right - left);
    mRect.left=(cX - radius);
    mRect.top=(bottom - radius);
    mRect.right=(cX + radius);
    mRect.bottom=(bottom + radius);
  }
switch (pDot.getDotStyle()) {
case DOT:
    canvas.drawCircle(cX,bottom,radius,paint);
  break;
case RING:
renderRing(canvas,paint,radius,pDot,cX,bottom);
break;
case TRIANGLE:
renderTriangle(canvas,paint,radius,right,bottom);
break;
case PRISMATIC:
renderPrismatic(canvas,paint,radius,right,bottom,left);
break;
case RECT:
renderRect(canvas,paint,radius,right,bottom);
break;
case X:
renderX(canvas,paint);
break;
case HIDE:
default :
}
return mRect;
}
