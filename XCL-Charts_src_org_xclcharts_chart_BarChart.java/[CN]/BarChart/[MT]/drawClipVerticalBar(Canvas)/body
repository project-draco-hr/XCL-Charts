{
  float offsetX=mTranslateXY[0];
  float offsetY=mTranslateXY[1];
  initMoveXY();
  canvas.save();
  canvas.clipRect(this.getLeft(),this.getTop(),this.getRight(),this.getBottom());
  if (XEnum.PanMode.VERTICAL == this.getPlotPanMode() || XEnum.PanMode.FREE == this.getPlotPanMode()) {
    float yMargin=getDrawClipVerticalYMargin();
    canvas.save();
    canvas.clipRect(this.getLeft(),plotArea.getTop() - yMargin,this.getRight(),plotArea.getBottom() + yMargin);
    canvas.translate(0,offsetY);
    renderVerticalBarDataAxis(canvas);
    canvas.restore();
  }
 else {
    renderVerticalBarDataAxis(canvas);
  }
  if (XEnum.PanMode.HORIZONTAL == this.getPlotPanMode() || XEnum.PanMode.FREE == this.getPlotPanMode()) {
    float xMargin=getDrawClipVerticalXMargin();
    canvas.save();
    canvas.clipRect(plotArea.getLeft() - xMargin,plotArea.getTop(),plotArea.getRight() + xMargin,this.getBottom());
    canvas.translate(offsetX,0);
    renderVerticalBarCategoryAxis(canvas);
    canvas.restore();
  }
 else {
    renderVerticalBarCategoryAxis(canvas);
  }
  canvas.save();
  canvas.clipRect(plotArea.getLeft(),plotArea.getTop(),plotArea.getRight(),plotArea.getBottom() + 1.0f);
  canvas.save();
  canvas.translate(mMoveX,mMoveY);
  renderVerticalBar(canvas);
  execGC();
  canvas.restore();
  canvas.restore();
  canvas.restore();
  renderVerticalBarAxis(canvas);
  plotLegend.renderBarKey(canvas,this.mDataSet);
  return true;
}
