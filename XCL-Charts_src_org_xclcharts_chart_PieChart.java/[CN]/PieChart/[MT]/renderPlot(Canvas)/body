{
  try {
    if (null == mDataset) {
      Log.e(TAG,"???????????????.");
      return false;
    }
    float cirX=plotArea.getCenterX();
    float cirY=plotArea.getCenterY();
    float radius=getRadius();
    initRectF("mArcRF0",sub(cirX,radius),sub(cirY,radius),add(cirX,radius),add(cirY,radius));
    float currentAngle=0.0f;
    float offsetAngle=mOffsetAngle;
    int i=0;
    PointF[] arrPoint=new PointF[mDataset.size()];
    for (    PieData cData : mDataset) {
      currentAngle=cData.getSliceAngle();
      if (!validateAngle(currentAngle))       continue;
      geArcPaint().setColor(cData.getSliceColor());
      if (cData.getSelected()) {
        if (!drawSelectedSlice(canvas,geArcPaint(),cData,cirX,cirY,radius,offsetAngle,currentAngle))         return false;
        arrPoint[i]=new PointF(MathHelper.getInstance().getPosX(),MathHelper.getInstance().getPosY());
      }
 else {
        if (!drawSlice(canvas,geArcPaint(),mArcRF0,cData,cirX,cirY,radius,offsetAngle,(float)currentAngle))         return false;
        arrPoint[i]=new PointF(cirX,cirY);
      }
      saveArcRecord(i,cirX + this.mTranslateXY[0],cirY + this.mTranslateXY[1],radius,offsetAngle,currentAngle,mSelectedOffset);
      offsetAngle=add(offsetAngle,currentAngle);
      i++;
    }
    renderLabels(canvas,mOffsetAngle,radius,arrPoint);
    plotLegend.renderPieKey(canvas,this.mDataset);
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString());
    return false;
  }
  return true;
}
