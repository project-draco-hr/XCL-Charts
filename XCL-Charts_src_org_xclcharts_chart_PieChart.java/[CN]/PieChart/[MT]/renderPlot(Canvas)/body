{
  try {
    if (null == mDataset) {
      Log.e(TAG,"???????????????.");
      return false;
    }
    float cirX=plotArea.getCenterX();
    float cirY=plotArea.getCenterY();
    float radius=getRadius();
    float currentAngle=0.0f;
    float offsetAngle=mOffsetAngle;
    int i=0;
    mLstLabels.clear();
    float left=sub(cirX,radius);
    float top=sub(cirY,radius);
    float right=add(cirX,radius);
    float bottom=add(cirY,radius);
    for (    PieData cData : mDataset) {
      currentAngle=cData.getSliceAngle();
      if (!validateAngle(currentAngle))       continue;
      geArcPaint().setColor(cData.getSliceColor());
      if (getGradient())       geArcPaint().setShader(renderRadialGradient(geArcPaint(),cirX,cirY,radius));
      if (cData.getSelected()) {
        float newRadius=div(radius,mSelectedOffset);
        PointF point=MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,newRadius,add(offsetAngle,currentAngle / 2f));
        initRectF(sub(point.x,radius),sub(point.y,radius),add(point.x,radius),add(point.y,radius));
        mLstLabels.add(new PlotArcLabelInfo(i,point.x,point.y,radius,offsetAngle,currentAngle));
      }
 else {
        initRectF(left,top,right,bottom);
        mLstLabels.add(new PlotArcLabelInfo(i,cirX,cirY,radius,offsetAngle,currentAngle));
      }
      canvas.drawArc(mRectF,offsetAngle,currentAngle,true,geArcPaint());
      renderArcBorder(canvas,mRectF,offsetAngle,currentAngle);
      saveArcRecord(i,cirX + this.mTranslateXY[0],cirY + this.mTranslateXY[1],radius,offsetAngle,currentAngle,mSelectedOffset,getInitialAngle());
      offsetAngle=add(offsetAngle,currentAngle);
      i++;
    }
    renderLabels(canvas);
    plotLegend.renderPieKey(canvas,this.mDataset);
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString());
    return false;
  }
  return true;
}
