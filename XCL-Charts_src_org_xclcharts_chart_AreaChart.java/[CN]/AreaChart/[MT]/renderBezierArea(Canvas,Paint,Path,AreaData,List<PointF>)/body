{
  int count=lstPathPoints.size();
  if (count < 3)   return false;
  paintAreaFill.setColor(areaData.getAreaFillColor());
  if (count == 3) {
    if (null == bezierPath)     bezierPath=new Path();
    bezierPath.moveTo(lstPathPoints.get(0).x,plotArea.getBottom());
    bezierPath.lineTo(lstPathPoints.get(0).x,lstPathPoints.get(0).y);
    PointF ctl3=PointHelper.percent(lstPathPoints.get(1),0.5f,lstPathPoints.get(2),0.8f);
    bezierPath.quadTo(ctl3.x,ctl3.y,lstPathPoints.get(2).x,lstPathPoints.get(2).y);
    bezierPath.lineTo(lstPathPoints.get(2).x,plotArea.getBottom());
    bezierPath.close();
    if (areaData.getApplayGradient()) {
      LinearGradient linearGradient;
      if (areaData.getGradientDirection() == XEnum.Direction.VERTICAL) {
        float lineMaxY=getLineMaxMinY(Y_MAX,lstPathPoints);
        linearGradient=new LinearGradient(0,0,0,plotArea.getBottom() - lineMaxY,areaData.getAreaBeginColor(),areaData.getAreaEndColor(),areaData.getGradientMode());
      }
 else {
        float lineMinY=getLineMaxMinY(Y_MIN,lstPathPoints);
        linearGradient=new LinearGradient(plotArea.getLeft(),plotArea.getBottom(),lstPathPoints.get(2).x,lineMinY,areaData.getAreaBeginColor(),areaData.getAreaEndColor(),areaData.getGradientMode());
      }
      paintAreaFill.setShader(linearGradient);
    }
 else {
      paintAreaFill.setShader(null);
    }
    canvas.drawPath(bezierPath,paintAreaFill);
    bezierPath.reset();
    return true;
  }
  paintAreaFill.setAlpha(this.mAreaAlpha);
  bezierPath.moveTo(plotArea.getLeft(),plotArea.getBottom());
  float axisMinValue=plotArea.getBottom();
  for (int i=0; i < count; i++) {
    if (i < 3)     continue;
    if (lstPathPoints.get(i - 1).y >= axisMinValue && lstPathPoints.get(i).y >= axisMinValue) {
      if (i == count - 1) {
        continue;
      }
      if (null == bezierPath) {
        bezierPath=new Path();
        bezierPath.moveTo(lstPathPoints.get(i - 2).x,lstPathPoints.get(i - 2).y);
      }
 else {
        bezierPath.lineTo(lstPathPoints.get(i - 2).x,lstPathPoints.get(i - 2).y);
      }
      if (lstPathPoints.get(i - 2).y >= axisMinValue) {
        bezierPath.moveTo(lstPathPoints.get(i - 1).x,lstPathPoints.get(i - 1).y);
      }
 else {
        CurveHelper.curve3(lstPathPoints.get(i - 2),lstPathPoints.get(i - 1),lstPathPoints.get(i - 3),lstPathPoints.get(i),mBezierControls);
        bezierPath.quadTo(mBezierControls[0].x,mBezierControls[0].y,lstPathPoints.get(i - 1).x,lstPathPoints.get(i - 1).y);
      }
      bezierPath.close();
      if (areaData.getApplayGradient()) {
        LinearGradient linearGradient;
        if (areaData.getGradientDirection() == XEnum.Direction.VERTICAL) {
          float lineMaxY=getLineMaxMinY(Y_MAX,lstPathPoints);
          linearGradient=new LinearGradient(0,0,0,lineMaxY,areaData.getAreaBeginColor(),areaData.getAreaEndColor(),areaData.getGradientMode());
        }
 else {
          float lineMinY=getLineMaxMinY(Y_MIN,lstPathPoints);
          linearGradient=new LinearGradient(plotArea.getLeft(),plotArea.getBottom(),lstPathPoints.get(i - 1).x,lineMinY,areaData.getAreaBeginColor(),areaData.getAreaEndColor(),areaData.getGradientMode());
        }
        paintAreaFill.setShader(linearGradient);
      }
 else {
        paintAreaFill.setShader(null);
      }
      canvas.drawPath(bezierPath,paintAreaFill);
      bezierPath.reset();
      bezierPath.moveTo(lstPathPoints.get(i).x,lstPathPoints.get(i).y);
      continue;
    }
    CurveHelper.curve3(lstPathPoints.get(i - 2),lstPathPoints.get(i - 1),lstPathPoints.get(i - 3),lstPathPoints.get(i),mBezierControls);
    bezierCurvePathAxisMinValue(bezierPath,lstPathPoints.get(i - 2),lstPathPoints.get(i - 1),mBezierControls);
  }
  PointF stop=lstPathPoints.get(count - 1);
  if (lstPathPoints.get(count - 2).y >= axisMinValue) {
    CurveHelper.curve3(lstPathPoints.get(count - 3),stop,lstPathPoints.get(count - 4),stop,mBezierControls);
    bezierCurvePathAxisMinValue(bezierPath,lstPathPoints.get(count - 3),stop,mBezierControls);
  }
 else {
    CurveHelper.curve3(lstPathPoints.get(count - 2),stop,lstPathPoints.get(count - 3),stop,mBezierControls);
    bezierCurvePathAxisMinValue(bezierPath,lstPathPoints.get(count - 2),lstPathPoints.get(count - 1),mBezierControls);
  }
  bezierPath.close();
  if (areaData.getApplayGradient()) {
    LinearGradient linearGradient;
    if (areaData.getGradientDirection() == XEnum.Direction.VERTICAL) {
      float lineMaxY=getLineMaxMinY(Y_MAX,lstPathPoints);
      linearGradient=new LinearGradient(0,0,0,lineMaxY,areaData.getAreaBeginColor(),areaData.getAreaEndColor(),areaData.getGradientMode());
    }
 else {
      float lineMinY=getLineMaxMinY(Y_MIN,lstPathPoints);
      linearGradient=new LinearGradient(plotArea.getLeft(),plotArea.getBottom(),stop.x,lineMinY,areaData.getAreaBeginColor(),areaData.getAreaEndColor(),areaData.getGradientMode());
    }
    paintAreaFill.setShader(linearGradient);
  }
 else {
    paintAreaFill.setShader(null);
  }
  canvas.drawPath(bezierPath,paintAreaFill);
  bezierPath.reset();
  return true;
}
