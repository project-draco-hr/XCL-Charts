{
  super.calcPlotRange();
  float perLeft=getPaddingPercentLeft();
  float perRight=getPaddingPercentRight();
  float perBottom=getPaddingPercentBottom();
  float width=getChartWidth();
  float height=getChartHeight();
  if (width > height) {
    float scrPer=height / width;
    perBottom+=scrPer;
    perLeft-=scrPer;
    perRight-=scrPer;
  }
  DrawHelper dw=new DrawHelper();
  if (perLeft > 0) {
    float rederLeft=Math.round(height / 100 * perLeft);
    if (this.getLegend().getLeftLegend().length() > 0) {
      float legendLength=dw.getPaintFontHeight(getLegend().getLeftLegendPaint());
      if (legendLength > rederLeft)       rederLeft=legendLength;
    }
    plotArea.setPlotLeft(getChartLeft() + rederLeft);
  }
  if (perRight > 0) {
    float rederRight=Math.round(width / 100 * perRight);
    if (this.getLegend().getRightLegend().length() > 0) {
      float legendLength=dw.getPaintFontHeight(getLegend().getRightLegendPaint());
      if (legendLength > rederRight)       rederRight=legendLength;
    }
    plotArea.setPlotRight(this.getChartRight() - rederRight);
  }
  if (perBottom > 0) {
    float rederBottom=Math.round(height / 100 * perBottom);
    if (this.getLegend().getLowerLegend().length() > 0) {
      float legendHeight=dw.getPaintFontHeight(getLegend().getLowerLegendPaint());
      if (legendHeight > rederBottom)       rederBottom=legendHeight;
    }
    plotArea.setPlotBottom(this.getChartBottom() - rederBottom);
  }
}
