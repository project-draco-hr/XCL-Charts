{
  if (null == mDataset) {
    Log.e(TAG,"???????????????.");
    return false;
  }
  float cirX=plotArea.getCenterX();
  float cirY=plotArea.getCenterY();
  float radius=getRadius();
  try {
    float currentAngle=0.0f;
    float offsetAngle=OFFSET_ANGLE;
    int i=0;
    int dataCount=mDataset.size();
    float barTotalSize=sub(radius,mul(radius,mInnerRaius));
    float mulBarSize=div(barTotalSize,dataCount);
    float spaceSize=mul(mulBarSize,mBarInnerMargin);
    float barSize=sub(mulBarSize,spaceSize);
    float labelRadius=0.0f;
    PointF[] arrLabPoint=new PointF[dataCount];
    PointF[] arrCapPoint=new PointF[dataCount];
    int[] arrCapColor=new int[dataCount];
    canvas.drawCircle(cirX,cirY,radius,mPaintFill);
    for (    ArcLineData cData : mDataset) {
      currentAngle=cData.getSliceAngle();
      if (!validateAngle(currentAngle))       continue;
      getLinePaint().setColor(cData.getBarColor());
      DrawHelper.getInstance().drawPercent(canvas,getLinePaint(),cirX,cirY,radius,offsetAngle,currentAngle,true);
      PointF point=MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,radius - barSize / 2,add(offsetAngle,currentAngle));
      arrCapPoint[i]=new PointF(point.x,point.y);
      arrCapColor[i]=cData.getBarColor();
      labelRadius=radius - barSize / 2;
      point=MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,labelRadius,add(offsetAngle,0));
      arrLabPoint[i]=new PointF(point.x,point.y);
      canvas.drawCircle(cirX,cirY,radius - barSize,mPaintFill);
      radius=sub(radius,mulBarSize);
      i++;
    }
    renderCap(canvas,barSize * 0.8f,arrCapPoint,arrCapColor);
    renderLabels(canvas,radius,arrLabPoint);
    plotLegend.renderRoundBarKey(canvas,this.mDataset);
    arrLabPoint=null;
    arrCapPoint=null;
    arrCapColor=null;
  }
 catch (  Exception e) {
    Log.e(TAG,"error:" + e.toString());
    return false;
  }
  return true;
}
