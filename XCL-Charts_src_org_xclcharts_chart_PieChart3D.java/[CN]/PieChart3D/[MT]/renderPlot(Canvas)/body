{
  float cirX=plotArea.getCenterX();
  float cirY=plotArea.getCenterY();
  float radius=getRadius();
  float arcLeft=cirX - radius;
  float arcTop=cirY - radius;
  float arcRight=cirX + radius;
  float arcBottom=cirY + radius;
  RectF arcRF0=new RectF(arcLeft,arcTop,arcRight,arcBottom);
  Paint paintArc=new Paint();
  paintArc.setAntiAlias(true);
  List<PieData> chartDataSource=this.getDataSource();
  if (null == chartDataSource)   return;
  int initOffsetAgent=mOffsetAgent;
  float currentAgent=0.0f;
  for (int i=0; i < mRender3DLevel; i++) {
    canvas.save(Canvas.MATRIX_SAVE_FLAG);
    canvas.translate(0,mRender3DLevel - i);
    for (int j=0; j < chartDataSource.size(); j++) {
      PieData cData=chartDataSource.get(j);
      paintArc.setColor(cData.getSliceColor());
      currentAgent=cData.getSliceAgent();
      if (cData.getSelected()) {
        float newRadius=radius / 10;
        MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,newRadius,mOffsetAgent + currentAgent / 2);
        float arcLeft2=MathHelper.getInstance().getPosX() - radius;
        float arcTop2=MathHelper.getInstance().getPosY() - radius;
        float arcRight2=MathHelper.getInstance().getPosX() + radius;
        float arcBottom2=MathHelper.getInstance().getPosY() + radius;
        RectF arcRF1=new RectF(arcLeft2,arcTop2,arcRight2,arcBottom2);
        canvas.drawArc(arcRF1,mOffsetAgent,currentAgent,true,paintArc);
      }
 else {
        canvas.drawArc(arcRF0,mOffsetAgent,currentAgent,true,paintArc);
      }
      mOffsetAgent+=currentAgent;
    }
    canvas.restore();
    mOffsetAgent=initOffsetAgent;
  }
  DrawHelper dw=new DrawHelper();
  currentAgent=0.0f;
  for (int j=0; j < chartDataSource.size(); j++) {
    PieData cData=chartDataSource.get(j);
    currentAgent=cData.getSliceAgent();
    int darkColor=dw.getDarkerColor((int)cData.getSliceColor());
    paintArc.setColor(darkColor);
    if (cData.getSelected()) {
      float newRadius=radius / 10;
      MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,newRadius,mOffsetAgent + currentAgent / 2);
      float arcLeft2=MathHelper.getInstance().getPosX() - radius;
      float arcTop2=MathHelper.getInstance().getPosY() - radius;
      float arcRight2=MathHelper.getInstance().getPosX() + radius;
      float arcBottom2=MathHelper.getInstance().getPosY() + radius;
      RectF arcRF1=new RectF(arcLeft2,arcTop2,arcRight2,arcBottom2);
      canvas.drawArc(arcRF1,mOffsetAgent,currentAgent,true,paintArc);
      renderLabel(canvas,cData.getLabel(),MathHelper.getInstance().getPosX(),MathHelper.getInstance().getPosY(),radius,mOffsetAgent,currentAgent);
    }
 else {
      canvas.drawArc(arcRF0,mOffsetAgent,currentAgent,true,paintArc);
      renderLabel(canvas,cData.getLabel(),cirX,cirY,radius,mOffsetAgent,currentAgent);
    }
    mOffsetAgent+=currentAgent;
  }
  plotKey.renderPieKey(canvas,this.getDataSource());
}
