{
  List<PieData> chartDataSource=this.getDataSource();
  if (null == chartDataSource) {
    Log.e(TAG,"???????????????.");
    return false;
  }
  float cirX=plotArea.getCenterX();
  float cirY=plotArea.getCenterY();
  float radius=getRadius();
  float arcLeft=sub(cirX,radius);
  float arcTop=sub(cirY,radius);
  float arcRight=add(cirX,radius);
  float arcBottom=add(cirY,radius);
  RectF arcRF0=new RectF(arcLeft,arcTop,arcRight,arcBottom);
  Paint paintArc=new Paint();
  paintArc.setAntiAlias(true);
  float initOffsetAngle=mOffsetAngle;
  float offsetAngle=initOffsetAngle;
  float currentAngle=0.0f;
  for (int i=0; i < mRender3DLevel; i++) {
    canvas.save(Canvas.MATRIX_SAVE_FLAG);
    canvas.translate(0,mRender3DLevel - i);
    for (int j=0; j < chartDataSource.size(); j++) {
      PieData cData=chartDataSource.get(j);
      paintArc.setColor(cData.getSliceColor());
      currentAngle=cData.getSliceAngle();
      if (Float.compare(currentAngle,0.0f) == 0 || Float.compare(currentAngle,0.0f) == -1)       continue;
      if (cData.getSelected()) {
        float newRadius=div(radius,SELECTED_OFFSET);
        MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,newRadius,add(offsetAngle,div(currentAngle,2f)));
        float arcLeft2=sub(MathHelper.getInstance().getPosX(),radius);
        float arcTop2=sub(MathHelper.getInstance().getPosY(),radius);
        float arcRight2=add(MathHelper.getInstance().getPosX(),radius);
        float arcBottom2=add(MathHelper.getInstance().getPosY(),radius);
        RectF arcRF1=new RectF(arcLeft2,arcTop2,arcRight2,arcBottom2);
        canvas.drawArc(arcRF1,offsetAngle,currentAngle,true,paintArc);
      }
 else {
        canvas.drawArc(arcRF0,offsetAngle,currentAngle,true,paintArc);
      }
      offsetAngle=add(offsetAngle,currentAngle);
    }
    canvas.restore();
    offsetAngle=initOffsetAngle;
  }
  currentAngle=0.0f;
  offsetAngle=initOffsetAngle;
  for (int j=0; j < chartDataSource.size(); j++) {
    PieData cData=chartDataSource.get(j);
    currentAngle=cData.getSliceAngle();
    int darkColor=DrawHelper.getInstance().getDarkerColor((int)cData.getSliceColor());
    paintArc.setColor(darkColor);
    if (cData.getSelected()) {
      float newRadius=div(radius,SELECTED_OFFSET);
      MathHelper.getInstance().calcArcEndPointXY(cirX,cirY,newRadius,add(offsetAngle,div(currentAngle,2f)));
      float arcLeft2=sub(MathHelper.getInstance().getPosX(),radius);
      float arcTop2=sub(MathHelper.getInstance().getPosY(),radius);
      float arcRight2=add(MathHelper.getInstance().getPosX(),radius);
      float arcBottom2=add(MathHelper.getInstance().getPosY(),radius);
      RectF arcRF1=new RectF(arcLeft2,arcTop2,arcRight2,arcBottom2);
      canvas.drawArc(arcRF1,offsetAngle,(float)currentAngle,true,paintArc);
      renderLabel(canvas,cData.getLabel(),MathHelper.getInstance().getPosX(),MathHelper.getInstance().getPosY(),radius,offsetAngle,currentAngle);
    }
 else {
      canvas.drawArc(arcRF0,offsetAngle,(float)currentAngle,true,paintArc);
      renderLabel(canvas,cData.getLabel(),cirX,cirY,radius,offsetAngle,currentAngle);
    }
    saveArcRecord(j,cirX,cirY,radius,offsetAngle,currentAngle);
    offsetAngle=add(offsetAngle,currentAngle);
  }
  plotLegend.renderPieKey(canvas,this.getDataSource());
  return true;
}
