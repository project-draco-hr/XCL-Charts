{
  if (null == pAnchor)   return;
  float radius=pAnchor.getRadius();
switch (pAnchor.getAreaStyle()) {
case FILL:
    getBgPaint().setStyle(Style.FILL);
  break;
case STROKE:
getBgPaint().setStyle(Style.STROKE);
break;
}
getBgPaint().setColor(pAnchor.getBgColor());
float width=getBgPaint().getStrokeWidth();
if (pAnchor.getLineWidth() > -1) {
getBgPaint().setStrokeWidth(pAnchor.getLineWidth());
}
switch (pAnchor.getAnchorStyle()) {
case CAPRECT:
case CAPROUNDRECT:
case ROUNDRECT:
renderRoundRect(canvas,pAnchor,cx,cy,radius);
break;
default :
switch (pAnchor.getAnchorStyle()) {
case RECT:
renderRect(canvas,getBgPaint(),radius,cx,cy);
break;
case CIRCLE:
canvas.drawCircle(cx,cy,radius,getBgPaint());
break;
case VLINE:
DrawHelper.getInstance().drawLine(pAnchor.getLineStyle(),cx,top,cx,bottom,canvas,getBgPaint());
break;
case HLINE:
DrawHelper.getInstance().drawLine(pAnchor.getLineStyle(),left,cy,right,cy,canvas,getBgPaint());
break;
case TOBOTTOM:
DrawHelper.getInstance().drawLine(pAnchor.getLineStyle(),cx,cy + cradius,cx,bottom,canvas,getBgPaint());
break;
case TOTOP:
DrawHelper.getInstance().drawLine(pAnchor.getLineStyle(),cx,cy - cradius,cx,top,canvas,getBgPaint());
break;
case TOLEFT:
DrawHelper.getInstance().drawLine(pAnchor.getLineStyle(),cx - cradius,cy,left,cy,canvas,getBgPaint());
break;
case TORIGHT:
DrawHelper.getInstance().drawLine(pAnchor.getLineStyle(),cx + cradius,cy,right,cy,canvas,getBgPaint());
break;
default :
}
if (pAnchor.getAnchor().trim() != "") {
getTextPaint().setColor(pAnchor.getTextColor());
getTextPaint().setTextSize(pAnchor.getTextSize());
canvas.drawText(pAnchor.getAnchor(),cx,cy,getTextPaint());
}
}
getBgPaint().setStrokeWidth(width);
}
